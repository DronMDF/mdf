Copyright (c) 2000-2007 Валяев Андрей (dron@infosec.ru)
All rights reserved.

Создано: 03/07/07 11:36:07

(11:05:40)  Grindars:  я вот думаю PCI сделать. можно сделать через PCI BIOS32 -
	это не особо извратно и несложно, но требует поддержки в ядре.
(11:06:00)  Grindars:  или сделать через порты, но таких драйверов потребуется
	много.
(11:06:14)  Дрон:  почему много? все разные?
(11:06:17)  Grindars:  да.
(11:06:33)  Grindars:  у каждого моста свой интерфейс.
(11:06:38)  Дрон:  Поддержку в этом ядре не жди/
(11:06:45)  Дрон:  надо переделывать
(11:06:59)  Grindars:  *тяжело вздохнул*
(11:07:12)  Grindars:  в проге мне мешают сделать две вещи:
(11:07:21)  Grindars:  1. я не знаю, какие нужны порты
(11:07:33)  Grindars:  2. там везде привязка к физическим адресам.
(11:07:47)  Дрон:  всмысле?
(11:08:00)  Дрон:  всмысле про второе не понятно
(11:08:38)  Grindars:  ну, сначала надо найти в куске 0x0E0000 - 0x0FFFFF
	структуру
(11:08:54)  Дрон:  БИОС?
(11:09:14)  Grindars:  в ней будут физический адрес точки входа в BIOS32 и его
	размер.
(11:09:37)  Дрон:  Не, я думаю что поддержка со стороны ядра возможна...
	как для VESA, так и для PCIBIOS
(11:09:49)  Grindars:  потом вызвать BIOS32 на предмет адреса PCI BIOS
(11:10:15)  Grindars:  если он есть - отдаст физические адреса начала, точки
	вхда и длину.
(11:10:29)  Grindars:  потом работать через точку входа.
(11:10:54)  Grindars:  там все 100% 32 битное, не нужны никакие модификации GDT
	и особые селекторы.
(11:11:17)  Дрон:  А-а-а... ну пока можешь побаловаться через PhysicalRegion
(11:11:58)  Дрон:  Я вернусь из отпуска - сразу займусь новым ядром... если
	займусь активно - это не займет долго времени
(11:13:09)  Grindars:  не, работать все равно не будет
(11:13:36)  Grindars:  как же  Call работать будет, и какие порты ему нужны тоже
	не знаю.
(11:13:38)  Дрон:  почему?
(11:13:47)  Дрон:  а-а-а...
(11:13:52)  Дрон:  проблема
(11:14:08)  Дрон:  call - то это не самая большая проблема... а порты - можно продетектить...
(11:14:25)  Дрон:  всмысле просканировать биос на предмет инструкций ввода-вывода... :)
(11:14:34)  Дрон:  но там логика ацкая конечно
(11:14:37)  Grindars:  чтобы работал Call, мне надо примапить BIOS на тот же
	свой адрес, что и физический...
(11:14:46)  Дрон:  да, примерно так
(11:15:19)  Дрон:  а у меня этого нету... да, я понял
(11:15:39)  Дрон:  надо разделить создание ресурса и его аттач к себе
(11:16:04)  Дрон:  и еще думаю в новом ядре будут несколько специальных идов...
	типа псевдо иды
(11:16:35)  Дрон:  чтобы можно было идентифицировать текущий процесc, текущую
	нить, возможно само ядро
(11:16:38)  Grindars:  можно извратится, и примапить куда надо ...
	CreateNullProcess :) а потом приаттачить и убить.
(11:17:01)  Дрон:  не, давай я лучше автомап вырублю - это не сильно сложно
(11:17:11)  Grindars:  флагом!
(11:17:25)  Дрон:  можно и флагом
(11:17:38)  Дрон:  всмысле - флаг разрешающий автомап
(11:17:43)  Дрон:  прикольная идея
(11:17:53)  Grindars:  лучше наооборот. патчить много...
(11:18:08)  Дрон:  да ладно...
(11:18:33)  Grindars:  а потом еще дизассемблер писать :)
(11:19:38)  Дрон:  эмулятор ;) прогнать вызовы через эмулятор и сразу узнаешь
	какие порты он хочет ;)
(11:19:57)  Дрон:  Хотя вот мыслю, что можно сделать интересную фичу на эту тему
(11:20:01)  Grindars:  проще взять кучу прошивок, и посмотреть на порты.
(11:20:08)  Grindars:  никакого изврата тогда.
(11:20:21)  Дрон:  типа если нить зарубается по доступу к порту - то процсс
	может быть уведомлен об этом
(11:20:33)  Дрон:  вообще я думаю что процессу надо бы сделать сигналы
(11:20:43)  Дрон:  они сейчас есть, но какие-то не правильные
(11:21:04)  Grindars:  а почему я их не видел? :)
(11:23:15)  Дрон:  Их надо ждать... ResourceWait
(11:23:23)  Grindars:  а, это то...
(11:23:53)  Дрон:  я думаю лучше - чтобы процесс мог поставить на сигнал
	коллбек... типа TPC точку...
(11:23:59)  Grindars:  я за
(11:24:01)  Дрон:  и она будет срабатыватть при сигнале
(11:24:14)  Grindars:  можно так гуи сделать.
(11:24:45)  Grindars:  от сервера к проге
(11:24:47)  Дрон:  помоему ты достаточно хорошо придумал с TPC реплаями...
(11:26:15)  Дрон:  Просто вот иногда думаю об общем функционировании - надо
	например дать процессу команду на выход - ты ему сигналишь... или может
	быть в системе мало памяти - ядро сигналит всем процессам что надо бы
	освободить память (некоторые кеширующие процессы могут на это активно
	реагировать сдувая свои кеши)
(11:26:40)  Дрон:  освобождение я потом сделаю через свойства регионов
(11:27:05)  Дрон:  можно будет указывать диапазоны неиспользуемой памяти и она
	будет возвращена в общий пул без уничтожения региона
(11:28:24)  Дрон:  Ну еще применения можно придумать...
(11:28:31)  Дрон:  общепроцессные
(11:28:35)  Grindars:  я тут изучал даташит на чипсеты. если сделать pci - там и
	до ACPI недалеко.
(11:29:01)  Дрон:  а GUI можно реализовать и на обычном вызове... простонадо
	дать GUI доступ к своему хендлу и передать его идентификатор
(11:29:36)  Дрон:  ACPI - это шина управления чтоль?
(11:29:50)  Grindars:  ACPI - в основном управление питанием.
(11:30:03)  Дрон:  да, это прикольно
(11:30:21)  Grindars:  сетевую карту, TCP/IP :)
(11:32:28)  Дрон:  В любом случае у меня сменились приоритеты... ядро опять
	стало главным компонентом, потому что им начали пользоваться другие -
	ТЫ)... поэтому я после отпуска займусь его переписыванием. Просто я
	переборщил с асмом. А знаний по C++ в то время мне не хватало... сейчас
	я справлюсь с C++ ядром!
(11:32:57)  Дрон:  Просто кода станет значительно меньше, и код станет
	прозрачнее
(11:33:26)  Grindars:  главное что б тормозить не начало.
(11:33:48)  Дрон:  не надо об этом думать... если начнет тормозить - я найду где
	его подкрутить
(11:34:05)  Дрон:  пока надо думать - чтобы кода было меньше. это позволит
	успешнее развивать его
