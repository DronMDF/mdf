
Copyright (c) 2000-2006 Андрей Валяев (dron@infosec.ru)
All rights reserved.

Created: 28/12/06 22:37:46

Созрели некоторые идеи насчет сайта.
Надо зафиксировать

1. Безопасное хранение паролей к БД.

Для того чтобы пароль базы данных нельзя было явно прочитать из скриптов - можно
сделать следующим образом:

В скрипты прописывается только гостевой пароль к базе данных. Этот пароль
должен позволять только читать данные. Далее, в записи юзера хранится пароль,
допускающий запись в БД, но он зашифрован на пароле пользователя. Причем сам
пароль пользователя вообще не хранится. ни в каком виде.

Пользователь заходя на сайт предъявляет свой пароль, и получает доступ к базе
данных. после входа пользователя пароль пользователя может быть сохранен в
куках например...

Или в куках может быть сохранен сессионный ключ, на котором зашифрован другой
(сессионный) экземпляр пароля.

Собственно правильный пароль к БД и является проверкой валидности пароля
пользователя.

Из минусов могу отметить только двухкратное подключение к БД. Сперва надо
подключиться только на чтение, а потом переподключиться с возможностью записи.
Или возможен вариант, что доступ на чтение открыт постоянно, и все чтение идет
через него, а ради записи открывается специальный доступ. Учитывая то, что
пользователи чаще читают, чем пишут - это оправданно.

Может возникнуть вопрос о том, как регистрироваться. Но я думаю что регистрацию
вообще стоит сделать модерируемую, Следовательно в момент подтверждения
регистрации скрипт, работая в роли администратора будет знать пароль к БД и
сможет корректно зашифровать его для регистрируемого пользователя.

А пароль пользователя вообще может генерироваться автоматически!

Сессии хорошо... я вот только думаю насколько данные из сессий защищены от
кражи. Если я в сессии сохраню хеш пароля, который является ключем для пароля
БД, То не смогут ли его извлечь?

Хотя с другой стороны это можно будет максимально усложнить тем, что не хранить
имя пользователя (А пользователя идентифицировать по хешу от хеша). К тому же
на такой сайте, как SourceForge сессии вероятно хранятся централизованно. Мало
того что их много (что и так усложняет поиск), так они наверное вообще не
доступны с user.sourceforge.net Что делат сканирование вообще невозможным. Ну
короче будем считать этот метод надежным.


2. Менеджмент пользователей

Основная часть сайта только и умеет делать то, что следит за пользователями.
Весь другой функционал должен быть модульным.

Что касается самих пользователей, то я думаю надо ввести понятие роли.
И каждому пользователю назначать одну или несколько ролей.

Собственно ролями и будет проверяться возможность производить на сайте те или
иные действия.


3. Трекер.

Трекер служит для отслеживания и планирования работ.

--- Отступление
Я вообще хочу сделать сайт максимально удобным для работы...
То есть любое действие должно реализовываться минимумом телодвижений.
Исходя из этого будет строится интерфейс не только трекера но и остальных
модулей сайта.
---

Трекер состоит из следующих понятий...


3.1 Роадмап

Ну не знаю как лучше назвать, карта пути - вполне подходящие название.
Роадмап состоит из этапов развития системы. Этапы можно создавать на будующее.

Этапы, как и любой другой элемент трекера - имеют статусы. Активно/Завершено


3.2 Задача

Не знаю опять таки как лучше назвать. Описать могу как некое действо, не
имеющее четких действий... типа "Ошибка такая-то" - Ясно что это такое, но не
ясно что с этим делать... вот это задача.

Задачи подключаются к этапам и служат для определения степени завершенности
этапа.

Задачи имеют взаимозависимости.


3.3 Работа

Работа - это некое конкретное действие, которое надо произвести. Конечно
степень детализации - понятие относительное, но чем детальнее работа - тем
проще для программиста. Я думаю приемлимый уровень детализации - функции.

Работы ассоциируются с Задачами и служат для определения степени выполнения
задачи.

Работы также имеют взаимозависимости. Только вот не знаю пока надо ли делать
глобальность работ. Хотя принадлежность одной работы к нескольким задачам
сильно усложнит логику взаимодействия.

Следовательно работы локальные и всегда создаются в контексте задачи. Даже
номер работы можно формировать из номера задачи (типа 31.334)


3.4 Юзабилити трекера состоит из следующих моментов:

- Предусмотреть быстрое создание задач из Этапов.
- Предусмотреть быстрое создание работ из Задач.

Задачи отображаются при открытии детальной информации по этапу.
- Предусмотреть быструю смену статуса задач.
	Вероятно закрытие, при условии стопроцентного выполнения задачи.

Работы отображаются при открытии детальной информации по задаче.
- Таж фигня. Только статусы работ могут несколько отличаться.

При всем этом если у задачи есть невыполненные работы - закрытие вообще
недоступно! То есть смена должна происходить только на допустимые статусы!
В случае с работами тоже самое.

Назначать задачам/работам этапы/задачи соответственно можно только в случае
активности данного этапа/задачи (неактивные попросту не будут учавствовать)

При этом возможность повторной активации этапа/задачи/работы несомненно должна
присутствовать.


4. Что касается сайта в целом.

Все урлы должны быть актуальны в любом случае.
При архивации можно сохранять активность ссылки с минимумом информации.
Если эта архивация вообще будет.

4.1 Синхронизация

Архивации может и не будет, но что действительно нужно и полезно - так это
синхронизация. Дабы иметь возможность легко и непринужденно мигрировать с
сервера на сервер со всем контентом, а также поддерживать систему зеркал.

Просто надо предусмотреть режим работы сайта в режиме зеркала.
Юзер-администратор в любом случае будет присутствовать, но изменения в контент
лучше вносить централизованно, а иначе получается слишком хитро, нет никакого
смысла извращаться.

В каждой содержательной записи надо держать таймстамп, который отражает время
изменения записи. И при синхронизации вытягивать все, что изменилось с
последнего обновления.

Вот еще вопрос только в том, пустит ли база удаленно, вполне может и не
пустить. тогда нужен посредник в виде скрипта синхронизации.


Если я что-то где-то не учел, не стесняйтесь, пишите.

	Андрей Валяев (dron@infosec.ru)
